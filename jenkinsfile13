pipeline {
    agent any

    environment {
        SCANNER_HOME = tool 'sonar-scanner'
    }
    
    tools {
        maven 'maven3'
        jdk 'jdk11'
        jdk 'jdk17'
    }

    stages {
        // stage('Git Checkout') {
        //     steps {
        //         git 'https://github.com/shubham-sihasane/Greetings.git'
        //     }
        // }
        stage('Compile') {
            steps {
                sh 'mvn compile'
            }
        }
        stage('Test') {
            steps {
                sh 'mvn test'
            }
        }
        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv('sonar-server') {
                    sh '''
                        $SCANNER_HOME/bin/sonar-scanner -Dsonar.projectName-MavenProject -Dsonar.projectKey=MavenProject -Dsonar.java.binaries=.
                        echo $SCANNER_HOME
                    '''
                }
            }
        }
        stage('SonarQuality') {
            steps {
                timeout(time: 1, unit: 'HOURS') {
                    waitForQualityGate abortPipeline: true
                }
            }
        }

        // stage('SonarQube Analysis') {
        //     steps {
        //         withSonarQubeEnv('Sonarqube Server') {
        //             script {
        //                 def sonarScanner = tool name: 'SonarQube Scanner', type: 'hudson.plugins.sonar.SonarRunnerInstallation'
        //                 sh "${sonarScanner}/bin/sonar-scanner " +
        //                 "-Dsonar.projectKey=ProjectName-${GIT_BRANCH} " +
        //                 "-Dsonar.projectName=ProjectName-${GIT_BRANCH} " +
        //                 "-Dsonar.projectVersion=0.0.0 " +
        //                 "-Dsonar.sources=**/src " +
        //                 "-Dsonar.java.binaries=**/build " +
        //                 "-Dsonar.exclusions=excluded_dirs/** " +
        //                 "-Dsonar.sourceEncoding=UTF-8"
        //             }
        //         }
        //         timeout(time: 5, unit: 'MINUTES') {
        //             script {
        //                 def qg = waitForQualityGate()
        //                 if (qg.status != 'OK') {
        //                     error "Pipeline aborted due to a quality gate failure: ${qg.status}"
        //                 }
        //             }
        //         }
        //     }
        // }
        
        stage('Package') {
            steps {
                sh 'mvn package'
            }
        }
         stage('Deploy') {
            steps {
                deploy adapters: [tomcat9(credentialsId: 'Tomcat-Deployer', path: '', url: 'http://13.233.100.223:8080')], contextPath: null, onFailure: false, war: '**/*.war'
            }
        }
    }
}
